{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"lab-docs/lab1/","text":"LAB 1: Intro to MATLAB Self-Balancing Robot Setup Introduction Welcome to the first session of the ES3011 experimental labs. We have two (2) sections in this lab: Introduction to MATLAB Self-Balancing Robot Setup Learning Outcomes Our goal at the end of this labs is that you should be able to: Perform basic linear algebra computations using MATLAB command window Write and run a MATLAB script Use the plot function in MATLAB Use basic control system functions such as tf , ss in MATLAB 1. Introduction to MATLAB In this section, you will get a gentle introduction to MATLAB and how to use it for control systems design and analysis. Instructions: If you don't have MATLAB, please follow this guide on installing MATLAB. Access the MATLAB Tutorials here Read through the following chapters to get the basics: Chapter 1 Chapter 2 Chapter 3 (through Identity Matrix, but skip 3D plotting, multi-dimensional arrays and structures) Open up the MATLAB software. Create a MATLAB script that does the following: Q1: Add two 3x3 identity matrices and multiplies that result by the vector [1;2;3] Q2: Plot the function y = sin(t) from 0 to 10 seconds with labeled axes and a suitable title. Q3: Find the roots of s^4 + 3s^3 - 15s^2 - 2s + 9 . Hint: First declare s = tf('s') and use zero(_yourFunction_) to find the roots. 2. Self-Balancing Robot Setup In this section, you will walk through the process of setting up the self-balancing robot and enable your programming environment in MATLAB. Instructions: If you don't have MATLAB, please follow this guide on installing MATLAB. Download and set up Visual Studio Code following this guide . Download Git (with Git Bash) here Calibrating the robot sensors (on-board IMU): The self-balancing robot uses an IMU (inertial measurement unit) for pose measurement. This sensor needs to be calibrated properly. Follow the instructions here What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: MATLAB Publish your script (and its output) as a PDF from MATLAB. Follow this guide to see how to. Section 2: Self-balancing Robot Setup [ Nothing to report here. Just ensure you are able to calibrate your robot ] Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"Lab 1"},{"location":"lab-docs/lab1/#lab_1_intro_to_matlab_self-balancing_robot_setup","text":"","title":"LAB 1: Intro to MATLAB &amp; Self-Balancing Robot Setup"},{"location":"lab-docs/lab1/#introduction","text":"Welcome to the first session of the ES3011 experimental labs. We have two (2) sections in this lab: Introduction to MATLAB Self-Balancing Robot Setup","title":"Introduction"},{"location":"lab-docs/lab1/#learning_outcomes","text":"Our goal at the end of this labs is that you should be able to: Perform basic linear algebra computations using MATLAB command window Write and run a MATLAB script Use the plot function in MATLAB Use basic control system functions such as tf , ss in MATLAB","title":"Learning Outcomes"},{"location":"lab-docs/lab1/#1_introduction_to_matlab","text":"In this section, you will get a gentle introduction to MATLAB and how to use it for control systems design and analysis.","title":"1. Introduction to MATLAB"},{"location":"lab-docs/lab1/#instructions","text":"If you don't have MATLAB, please follow this guide on installing MATLAB. Access the MATLAB Tutorials here Read through the following chapters to get the basics: Chapter 1 Chapter 2 Chapter 3 (through Identity Matrix, but skip 3D plotting, multi-dimensional arrays and structures) Open up the MATLAB software. Create a MATLAB script that does the following: Q1: Add two 3x3 identity matrices and multiplies that result by the vector [1;2;3] Q2: Plot the function y = sin(t) from 0 to 10 seconds with labeled axes and a suitable title. Q3: Find the roots of s^4 + 3s^3 - 15s^2 - 2s + 9 . Hint: First declare s = tf('s') and use zero(_yourFunction_) to find the roots.","title":"Instructions:"},{"location":"lab-docs/lab1/#2_self-balancing_robot_setup","text":"In this section, you will walk through the process of setting up the self-balancing robot and enable your programming environment in MATLAB.","title":"2. Self-Balancing Robot Setup"},{"location":"lab-docs/lab1/#instructions_1","text":"If you don't have MATLAB, please follow this guide on installing MATLAB. Download and set up Visual Studio Code following this guide . Download Git (with Git Bash) here Calibrating the robot sensors (on-board IMU): The self-balancing robot uses an IMU (inertial measurement unit) for pose measurement. This sensor needs to be calibrated properly. Follow the instructions here","title":"Instructions:"},{"location":"lab-docs/lab1/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: MATLAB Publish your script (and its output) as a PDF from MATLAB. Follow this guide to see how to. Section 2: Self-balancing Robot Setup [ Nothing to report here. Just ensure you are able to calibrate your robot ] Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"What to Submit:"},{"location":"lab-docs/lab2/","text":"Lab 2: Mathematical Modeling I Introduction Welcome to the second session of the ES3011 experimental labs. In this lab, we focus on mathematical modeling. The central question is \"How do describe/model our physical system mathematically to be able to anaylze its behavior?\" We will cover three sections in this lab: Mathematical modeling of basic dynamical systems Mathematical modeling of of the BalBot (self-balancing robot) Learning Outcomes Our goal at the end of this labs is that you should be able to: Understand and describe/model physical dynamic systems mathematically using differential equations Convert the differential equations to state-space model form by hand and using MATLAB functionality 1. Mathematical Modeling of Basic Dynamical Systems In this section, you will develop mathematical models for basic dynamical systems considered in control systems such as the mass-spring-damper and the DC motor. These models will then be put into state-space representation which will be used in future lab sessions for simulation and analysis. Instructions: In this lab instruction sheet , Review the MATLAB Intro section Complete problems I (Mass-spring-damper) and IV (Motor position) 2. Mathematical Modeling of the BalBot In this section, we will derive the mathematical model for the Balbot. Instructions: In this lab instruction sheet , You are required to answer all 5 questions in the sheet and record your solutions in your report. What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Mathematical Modeling of Basic Dynamical Systems (MATLAB) Include free-body diagram and/or equations of motion for the two systems assigned. Publish your MATLAB script with the defined state-space models as a PDF. Follow this guide to see how to. Section 2: Mathematical Modeling of the BalBot Present your answers to the five questions in your report. Make sure you include a free-body diagram of the robot in your report. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"Lab 2"},{"location":"lab-docs/lab2/#lab_2_mathematical_modeling_i","text":"","title":"Lab 2: Mathematical Modeling I"},{"location":"lab-docs/lab2/#introduction","text":"Welcome to the second session of the ES3011 experimental labs. In this lab, we focus on mathematical modeling. The central question is \"How do describe/model our physical system mathematically to be able to anaylze its behavior?\" We will cover three sections in this lab: Mathematical modeling of basic dynamical systems Mathematical modeling of of the BalBot (self-balancing robot)","title":"Introduction"},{"location":"lab-docs/lab2/#learning_outcomes","text":"Our goal at the end of this labs is that you should be able to: Understand and describe/model physical dynamic systems mathematically using differential equations Convert the differential equations to state-space model form by hand and using MATLAB functionality","title":"Learning Outcomes"},{"location":"lab-docs/lab2/#1_mathematical_modeling_of_basic_dynamical_systems","text":"In this section, you will develop mathematical models for basic dynamical systems considered in control systems such as the mass-spring-damper and the DC motor. These models will then be put into state-space representation which will be used in future lab sessions for simulation and analysis.","title":"1. Mathematical Modeling of Basic Dynamical Systems"},{"location":"lab-docs/lab2/#instructions","text":"In this lab instruction sheet , Review the MATLAB Intro section Complete problems I (Mass-spring-damper) and IV (Motor position)","title":"Instructions:"},{"location":"lab-docs/lab2/#2_mathematical_modeling_of_the_balbot","text":"In this section, we will derive the mathematical model for the Balbot.","title":"2. Mathematical Modeling of the BalBot"},{"location":"lab-docs/lab2/#instructions_1","text":"In this lab instruction sheet , You are required to answer all 5 questions in the sheet and record your solutions in your report.","title":"Instructions:"},{"location":"lab-docs/lab2/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Mathematical Modeling of Basic Dynamical Systems (MATLAB) Include free-body diagram and/or equations of motion for the two systems assigned. Publish your MATLAB script with the defined state-space models as a PDF. Follow this guide to see how to. Section 2: Mathematical Modeling of the BalBot Present your answers to the five questions in your report. Make sure you include a free-body diagram of the robot in your report. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"What to Submit:"},{"location":"lab-docs/lab3/","text":"Lab 3: Laplace Transforms Mathematical Modeling II Introduction Welcome to the third session of the ES3011 experimental labs. In this lab, we focus on laplace transformation. The central question is \"How do we simplify our system modeling and analysis by converting our equations from time-domain (differential equations) to s-domain (algebraic equations)?\" We will cover three sections in this lab: Laplace and inverse laplace transforms for basic dynamical systems Laplace transforms for the BalBot (self-balancing robot) Testing Balbot IMU Calibration Learning Outcomes Our goal at the end of this labs is that you should be able to: Understand how to perform laplace and inverse laplace transformation on basic dynamic systems Understand how to perform laplace for real robotic systems (the BalBot) 1. Laplace and Inverse Laplace Transforms for Basic Dynamical Systems In this section, you will find the frequency-domain representations of basic dynamical systems using the Laplace transformation. This representation would be instrumental in performing transfer function analysis in future lab sessions. Instructions: In this lab instruction sheet , Complete the Laplace and Inverse Laplace Transform Problems section Complete problems I (Mass-spring-damper) and IV (Motor position) 2. Laplace Transforms for the BalBot (Self-balancing Robot) In this section, we will build up on the differential equations derived in Lab 2. Given the differential equations, we will apply laplace transforms to convert the BalBot system model from time-domain to s-domain. Instructions: In this lab instruction sheet , You should have three (3) equations from Q5 which describe the full system dynamic model. You are required to derive the laplace transform of those equations by hand. 3. Testing Balbot IMU Calibration In Lab 1, we completed the IMU calibration process to ensure the robot get accurate feedback from the IMU sensor about its orientation. In this section, we will now test the calibration process by reading off the robot's pitch values on MATLAB using serial comm. Instructions: 1. Update your Balbot software: To update the Balbot software on your local PC, please run the git pull command in the directory where you cloned the WPI-ES3011 repository 2. Build and upload code to the Balbot: First, connect the robot to your PC via USB. Start up VS Code and, following the procedure in Lab 1, build and upload the code to the robot. 3. Test the IMU calibration on MATLAB: Next step is to start up MATLAB. Make sure you navigate to directory where you have saved the WPI-ES3011 Lab software Run the following command in your MATLAB command window (instead of add your actual team ID, e.g. 'Team 1') balbot_serial( team-ID ) Make sure you observe that the pitch value changes correctly as you manually move the robot about the X-axis. Take screen shots of your MATLAB output (similar to Fig. 2) when the robot is in three positions: Upright position (pitch = ~0 rad) Leaning backward (as far as you can go) Leaning forward (as far as you can go) Fig 1: Fig 2: What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Laplace and Inverse Laplace Transforms for Basic Dynamical Systems Present your solution to each of the questions in that section. Section 2: Laplace Transforms for the BalBot (Self-balancing Robot) Present your solution. Section 3: Test the IMU calibration on MATLAB Show the three MATLAB screen shots as described above. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions. Note If you completed the IMU calibration test in Lab 2, kindly copy and paste your solution in this lab report as the grades for this section would count in Lab 3 alone and not in Lab 2.","title":"Lab 3"},{"location":"lab-docs/lab3/#lab_3_laplace_transforms_mathematical_modeling_ii","text":"","title":"Lab 3: Laplace Transforms &amp; Mathematical Modeling II"},{"location":"lab-docs/lab3/#introduction","text":"Welcome to the third session of the ES3011 experimental labs. In this lab, we focus on laplace transformation. The central question is \"How do we simplify our system modeling and analysis by converting our equations from time-domain (differential equations) to s-domain (algebraic equations)?\" We will cover three sections in this lab: Laplace and inverse laplace transforms for basic dynamical systems Laplace transforms for the BalBot (self-balancing robot) Testing Balbot IMU Calibration","title":"Introduction"},{"location":"lab-docs/lab3/#learning_outcomes","text":"Our goal at the end of this labs is that you should be able to: Understand how to perform laplace and inverse laplace transformation on basic dynamic systems Understand how to perform laplace for real robotic systems (the BalBot)","title":"Learning Outcomes"},{"location":"lab-docs/lab3/#1_laplace_and_inverse_laplace_transforms_for_basic_dynamical_systems","text":"In this section, you will find the frequency-domain representations of basic dynamical systems using the Laplace transformation. This representation would be instrumental in performing transfer function analysis in future lab sessions.","title":"1. Laplace and Inverse Laplace Transforms for Basic Dynamical Systems"},{"location":"lab-docs/lab3/#instructions","text":"In this lab instruction sheet , Complete the Laplace and Inverse Laplace Transform Problems section Complete problems I (Mass-spring-damper) and IV (Motor position)","title":"Instructions:"},{"location":"lab-docs/lab3/#2_laplace_transforms_for_the_balbot_self-balancing_robot","text":"In this section, we will build up on the differential equations derived in Lab 2. Given the differential equations, we will apply laplace transforms to convert the BalBot system model from time-domain to s-domain.","title":"2. Laplace Transforms for the BalBot (Self-balancing Robot)"},{"location":"lab-docs/lab3/#instructions_1","text":"In this lab instruction sheet , You should have three (3) equations from Q5 which describe the full system dynamic model. You are required to derive the laplace transform of those equations by hand.","title":"Instructions:"},{"location":"lab-docs/lab3/#3_testing_balbot_imu_calibration","text":"In Lab 1, we completed the IMU calibration process to ensure the robot get accurate feedback from the IMU sensor about its orientation. In this section, we will now test the calibration process by reading off the robot's pitch values on MATLAB using serial comm.","title":"3. Testing Balbot IMU Calibration"},{"location":"lab-docs/lab3/#instructions_2","text":"1. Update your Balbot software: To update the Balbot software on your local PC, please run the git pull command in the directory where you cloned the WPI-ES3011 repository 2. Build and upload code to the Balbot: First, connect the robot to your PC via USB. Start up VS Code and, following the procedure in Lab 1, build and upload the code to the robot. 3. Test the IMU calibration on MATLAB: Next step is to start up MATLAB. Make sure you navigate to directory where you have saved the WPI-ES3011 Lab software Run the following command in your MATLAB command window (instead of add your actual team ID, e.g. 'Team 1') balbot_serial( team-ID ) Make sure you observe that the pitch value changes correctly as you manually move the robot about the X-axis. Take screen shots of your MATLAB output (similar to Fig. 2) when the robot is in three positions: Upright position (pitch = ~0 rad) Leaning backward (as far as you can go) Leaning forward (as far as you can go) Fig 1: Fig 2:","title":"Instructions:"},{"location":"lab-docs/lab3/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Laplace and Inverse Laplace Transforms for Basic Dynamical Systems Present your solution to each of the questions in that section. Section 2: Laplace Transforms for the BalBot (Self-balancing Robot) Present your solution. Section 3: Test the IMU calibration on MATLAB Show the three MATLAB screen shots as described above. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions. Note If you completed the IMU calibration test in Lab 2, kindly copy and paste your solution in this lab report as the grades for this section would count in Lab 3 alone and not in Lab 2.","title":"What to Submit:"},{"location":"lab-docs/lab4/","text":"LAB 4: Transfer Functions Transient Response Introduction Welcome to the fourth session of the ES3011 experimental labs. In this lab, we focus on transient response analysis. The goal is there is to study the time response of the system to different test signals. This analysis provides insight into the response characteristics of the system and enable controller design. We will cover three sections in this lab: Transient response analysis for basic dynamical systems Transient response analysis for the BalBot (self-balancing robot) Learning Outcomes Our goal at the end of this labs is that you should be able to: Understand how to perform transient response analyses on basic dynamical systems Understand how to perform transient response analyses for real robotic systems (the BalBot) 1. Transient Response Analysis for Basic Dynamical Systems In this section, you will perform transient response analysis on the basic dynamical systems previously considered: (1) Mass-Spring-Damper, (2) Motor Position. Instructions: In this lab instruction sheet , Complete problems I (Mass-spring-damper) and IV (Motor position) in the MATLAB section. 2. Transient Response Analysis for the BalBot (Self-balancing Robot) In this section, we will build up on the s-domain equations derived by applying laplace transformation in Lab 3. Instructions: Simplify your three differential equations by grouping the constants based on the table below: Derive the state-space representation of the system. For this, we'll use only the first two differential equations derived previously. Your equations should be in the form below (replace the alpha and beta coefficients with the correct variables). Please use the constants defined below for variables Hint: The state variables should be pitch angle, pitch velocity and linear velocity. The input should be sum of voltages to motors and outputs should be pitch angle and linear velocity . Using your state-space model defined above, please obtain the transient response for unit-impulse, unit-step and unit-ramp functions and report the values for peak time, settling time, rise time and maximum overshoot. Note As Lab 3 submission is no passed, we have provided the solution to the differential equation coefficients for the Balbot below to help you accurately complete this Lab. Please use this as you complete Section 2. What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Transient Response Analysis for Basic Dynamical Systems Include plots for each of the transient response analysis Include values of metrics obtained (e.g. rise time, etc.) Section 2: Transient Response Analysis for the BalBot (Self-balancing Robot) Include plots for each of the transient response analysis Include values of metrics obtained (e.g. rise time, etc.) Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"Lab 4"},{"location":"lab-docs/lab4/#lab_4_transfer_functions_transient_response","text":"","title":"LAB 4: Transfer Functions &amp; Transient Response"},{"location":"lab-docs/lab4/#introduction","text":"Welcome to the fourth session of the ES3011 experimental labs. In this lab, we focus on transient response analysis. The goal is there is to study the time response of the system to different test signals. This analysis provides insight into the response characteristics of the system and enable controller design. We will cover three sections in this lab: Transient response analysis for basic dynamical systems Transient response analysis for the BalBot (self-balancing robot)","title":"Introduction"},{"location":"lab-docs/lab4/#learning_outcomes","text":"Our goal at the end of this labs is that you should be able to: Understand how to perform transient response analyses on basic dynamical systems Understand how to perform transient response analyses for real robotic systems (the BalBot)","title":"Learning Outcomes"},{"location":"lab-docs/lab4/#1_transient_response_analysis_for_basic_dynamical_systems","text":"In this section, you will perform transient response analysis on the basic dynamical systems previously considered: (1) Mass-Spring-Damper, (2) Motor Position.","title":"1. Transient Response Analysis for Basic Dynamical Systems"},{"location":"lab-docs/lab4/#instructions","text":"In this lab instruction sheet , Complete problems I (Mass-spring-damper) and IV (Motor position) in the MATLAB section.","title":"Instructions:"},{"location":"lab-docs/lab4/#2_transient_response_analysis_for_the_balbot_self-balancing_robot","text":"In this section, we will build up on the s-domain equations derived by applying laplace transformation in Lab 3.","title":"2. Transient Response Analysis for the BalBot (Self-balancing Robot)"},{"location":"lab-docs/lab4/#instructions_1","text":"Simplify your three differential equations by grouping the constants based on the table below: Derive the state-space representation of the system. For this, we'll use only the first two differential equations derived previously. Your equations should be in the form below (replace the alpha and beta coefficients with the correct variables). Please use the constants defined below for variables Hint: The state variables should be pitch angle, pitch velocity and linear velocity. The input should be sum of voltages to motors and outputs should be pitch angle and linear velocity . Using your state-space model defined above, please obtain the transient response for unit-impulse, unit-step and unit-ramp functions and report the values for peak time, settling time, rise time and maximum overshoot. Note As Lab 3 submission is no passed, we have provided the solution to the differential equation coefficients for the Balbot below to help you accurately complete this Lab. Please use this as you complete Section 2.","title":"Instructions:"},{"location":"lab-docs/lab4/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: Transient Response Analysis for Basic Dynamical Systems Include plots for each of the transient response analysis Include values of metrics obtained (e.g. rise time, etc.) Section 2: Transient Response Analysis for the BalBot (Self-balancing Robot) Include plots for each of the transient response analysis Include values of metrics obtained (e.g. rise time, etc.) Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"What to Submit:"},{"location":"lab-docs/lab5/","text":"LAB 5: Controller Design Introduction Welcome to the fifth session of the ES3011 experimental labs. In this lab, we will learn how to design feedback controllers to achieve desired system performance. We will cover three sections in this lab: PID control design for basic dynamical systems Control design for the BalBot (self-balancing robot) using state feedback Learning Outcomes Our goal at the end of this labs is that you should be able to: Understand how to design controllers for basic dynamical systems using P and PID control Understand how to design controllers for real robotic systems (the BalBot) using state feedback 1. PID Control Design for Basic Dynamical Systems In this section, you will design feedback controllers for basic dynamical systems (i.e. mass-spring-damper and DC motor). Instructions: In this lab instruction sheet , Complete problems I (Mass-spring-damper) and IV (Motor position) in the MATLAB section. 2. Control Design for the BalBot (self-balancing robot) using State Feedback In this section, we will learn about state feedback and use this approach to design a feedback controller for the Balbot. Instructions: Stability of the Balbot In Lab 4, we explored the transient response of the balbot in MATLAB and found that it is unstable (the system response is unbounded). Practically, we see that the robot falls over when it is placed upright. The stability of the system is dependent on the poles of the characteristic equation. In your MATLAB script: Compute the poles of the system. Hint: You can either use pole( your-transfer-function ) or eig( your-A-matrix ) . Plot the poles and zeros of the system. Hint: You can either use pzmap( your-transfer-function ) . Briefly describe your observation. Note Please change the system parameter Gt = 2*Kt/R. This is because as we use the robot, we will be computing a single input voltage which would be the average of Vr and Vl (or V+/2) Formulating the state feedback controller Recall that the state-space of the balbot is: In formulating our state feedback, we set the input, U, as a function of the system state, X, and then choose the values of the K which would lead to a stable system. Hence, we get the new state-space of the robot to be: Now to compute the values of K (i.e. k1, k2, k3) which make the system stable, we compute the new characteristic equation of the system as a function of K and then see the values of K for a given system pole placement. Compute the characteristic equation of the system as a function of K (i.e. k1, k2, k3) by hand. Hint: Your result will take the following structure: Formulate your desired characteristic equation based on your desired poles. Example 1: To set poles at p = -10, we will set our desired equation to be (s + 10)^3 Example 2: To set poles at p1 = -10, p2 = -20, p3 = -2, we will set our desired equation to be (s + 10)(s + 20)(s + 2) Hence, choose your desired poles and formulate your characteristic equation in the form below: Next, compute the values of K required to make your desired characteristic equation and your new system characteristic equation equal. Evaluating the state feedback controller in MATLAB Using the feedback gains (K) obtained above, evaluate the system transient response. In your MATLAB script: Compute the poles of the new system. Hint: Use eig( your-(A-BK)-matrix ) Plot the poles and zeros of the system. Hint: Create a new state-space model using A = A-BK, and others as the same as before, then use ss2tf to obtain the transfer function. Lastly use pzmap( your-transfer-function ) to plot. Briefly describe your observation. You can try different pole values to see the effect on the system response. Implementing on the Balbot Once we have a good feedback controller in simulation, we can then implement it on the physical balbot. Update the Balbot software on your local PC by running the git pull command in the directory where you cloned the WPI-ES3011 repository. Insert your model parameters and the state feedback gain values in the controller.cpp file. You will see the points marked in the file. Load the code to the robot and observe its behavior. Hint: The behavior of the balbot in balancing would be based on the poles you defined above and the resulting gains. If you find unsatisfactory behavior, modify your pole values and update the gains. Take a very short video (convert to a short GIF) of your best performing controller and report what control parameters are. See below for reference: What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: PID Control Design for Basic Dynamical Systems Include plots and comments as the questions request. Section 2: Control Design for the BalBot (self-balancing robot) using State Feedback Make sure you include all the plots, equations and observation discussions requested above. Upload the short GIF of your robot balancing after you push it (as you see in the figure above) to Canvas. Follow link for a good GIF creator. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"Lab 5"},{"location":"lab-docs/lab5/#lab_5_controller_design","text":"","title":"LAB 5: Controller Design"},{"location":"lab-docs/lab5/#introduction","text":"Welcome to the fifth session of the ES3011 experimental labs. In this lab, we will learn how to design feedback controllers to achieve desired system performance. We will cover three sections in this lab: PID control design for basic dynamical systems Control design for the BalBot (self-balancing robot) using state feedback","title":"Introduction"},{"location":"lab-docs/lab5/#learning_outcomes","text":"Our goal at the end of this labs is that you should be able to: Understand how to design controllers for basic dynamical systems using P and PID control Understand how to design controllers for real robotic systems (the BalBot) using state feedback","title":"Learning Outcomes"},{"location":"lab-docs/lab5/#1_pid_control_design_for_basic_dynamical_systems","text":"In this section, you will design feedback controllers for basic dynamical systems (i.e. mass-spring-damper and DC motor).","title":"1. PID Control Design for Basic Dynamical Systems"},{"location":"lab-docs/lab5/#instructions","text":"In this lab instruction sheet , Complete problems I (Mass-spring-damper) and IV (Motor position) in the MATLAB section.","title":"Instructions:"},{"location":"lab-docs/lab5/#2_control_design_for_the_balbot_self-balancing_robot_using_state_feedback","text":"In this section, we will learn about state feedback and use this approach to design a feedback controller for the Balbot.","title":"2. Control Design for the BalBot (self-balancing robot) using State Feedback"},{"location":"lab-docs/lab5/#instructions_1","text":"Stability of the Balbot In Lab 4, we explored the transient response of the balbot in MATLAB and found that it is unstable (the system response is unbounded). Practically, we see that the robot falls over when it is placed upright. The stability of the system is dependent on the poles of the characteristic equation. In your MATLAB script: Compute the poles of the system. Hint: You can either use pole( your-transfer-function ) or eig( your-A-matrix ) . Plot the poles and zeros of the system. Hint: You can either use pzmap( your-transfer-function ) . Briefly describe your observation. Note Please change the system parameter Gt = 2*Kt/R. This is because as we use the robot, we will be computing a single input voltage which would be the average of Vr and Vl (or V+/2) Formulating the state feedback controller Recall that the state-space of the balbot is: In formulating our state feedback, we set the input, U, as a function of the system state, X, and then choose the values of the K which would lead to a stable system. Hence, we get the new state-space of the robot to be: Now to compute the values of K (i.e. k1, k2, k3) which make the system stable, we compute the new characteristic equation of the system as a function of K and then see the values of K for a given system pole placement. Compute the characteristic equation of the system as a function of K (i.e. k1, k2, k3) by hand. Hint: Your result will take the following structure: Formulate your desired characteristic equation based on your desired poles. Example 1: To set poles at p = -10, we will set our desired equation to be (s + 10)^3 Example 2: To set poles at p1 = -10, p2 = -20, p3 = -2, we will set our desired equation to be (s + 10)(s + 20)(s + 2) Hence, choose your desired poles and formulate your characteristic equation in the form below: Next, compute the values of K required to make your desired characteristic equation and your new system characteristic equation equal. Evaluating the state feedback controller in MATLAB Using the feedback gains (K) obtained above, evaluate the system transient response. In your MATLAB script: Compute the poles of the new system. Hint: Use eig( your-(A-BK)-matrix ) Plot the poles and zeros of the system. Hint: Create a new state-space model using A = A-BK, and others as the same as before, then use ss2tf to obtain the transfer function. Lastly use pzmap( your-transfer-function ) to plot. Briefly describe your observation. You can try different pole values to see the effect on the system response. Implementing on the Balbot Once we have a good feedback controller in simulation, we can then implement it on the physical balbot. Update the Balbot software on your local PC by running the git pull command in the directory where you cloned the WPI-ES3011 repository. Insert your model parameters and the state feedback gain values in the controller.cpp file. You will see the points marked in the file. Load the code to the robot and observe its behavior. Hint: The behavior of the balbot in balancing would be based on the poles you defined above and the resulting gains. If you find unsatisfactory behavior, modify your pole values and update the gains. Take a very short video (convert to a short GIF) of your best performing controller and report what control parameters are. See below for reference:","title":"Instructions:"},{"location":"lab-docs/lab5/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: PID Control Design for Basic Dynamical Systems Include plots and comments as the questions request. Section 2: Control Design for the BalBot (self-balancing robot) using State Feedback Make sure you include all the plots, equations and observation discussions requested above. Upload the short GIF of your robot balancing after you push it (as you see in the figure above) to Canvas. Follow link for a good GIF creator. Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"What to Submit:"},{"location":"lab-docs/lab6/","text":"LAB 6: Stability Analysis Frequency Response","title":"Lab 6"},{"location":"lab-docs/lab6/#lab_6_stability_analysis_frequency_response","text":"","title":"LAB 6: Stability Analysis &amp; Frequency Response"},{"location":"lab-docs/lab7/","text":"LAB 7: Controller Tuning Final Competition","title":"LAB 7: Controller Tuning & Final Competition"},{"location":"lab-docs/lab7/#lab_7_controller_tuning_final_competition","text":"","title":"LAB 7: Controller Tuning &amp; Final Competition"},{"location":"lab-overview/","text":"ES3011 Controls Lab Documentation Welcome to the ES3011 Experimental! We're excited to have you join us as we pilot this hands-on lab option for the ES3011 class. In this lab, you will get to hands-on experience learning fundamental control system concepts such as modeling, control design and analysis using the BalBot (self-balancing robot). Note The overarching goal of this lab is to analyze and design a feedback controller for the BalBot robot, to keep it robust to disturbances. Lab Schedule Lab# Title Date 1 Intro to MATLAB Self-Balancing Robot Setup Feb. 5 2 Mathematical Modeling I Feb. 12 3 Laplace Transforms Mathematical Modeling II Feb. 19 4 Transfer Functions Transient Response Feb. 26 * 5 Controller Design Mar. 5 6 Stability Analysis Frequency Response Mar. 12","title":"Lab Overview"},{"location":"lab-overview/#es3011_controls_lab_documentation","text":"Welcome to the ES3011 Experimental! We're excited to have you join us as we pilot this hands-on lab option for the ES3011 class. In this lab, you will get to hands-on experience learning fundamental control system concepts such as modeling, control design and analysis using the BalBot (self-balancing robot). Note The overarching goal of this lab is to analyze and design a feedback controller for the BalBot robot, to keep it robust to disturbances.","title":"ES3011 Controls Lab Documentation"},{"location":"lab-overview/#lab_schedule","text":"Lab# Title Date 1 Intro to MATLAB Self-Balancing Robot Setup Feb. 5 2 Mathematical Modeling I Feb. 12 3 Laplace Transforms Mathematical Modeling II Feb. 19 4 Transfer Functions Transient Response Feb. 26 * 5 Controller Design Mar. 5 6 Stability Analysis Frequency Response Mar. 12","title":"Lab Schedule"}]}